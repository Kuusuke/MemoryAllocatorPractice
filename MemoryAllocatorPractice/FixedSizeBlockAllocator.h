// ***************************************************************************************
/// @file			FixedSizeBlockAllocator.h
/// @brief			固定サイズブロックアロケータ
/// @author			楠原 健作
// ***************************************************************************************

// ***************************************************************************************
// PREPROCESS SECTION
// ***************************************************************************************
#ifndef FIXEDSIZEBLOCKALLOCATOR_H
#define FIXEDSIZEBLOCKALLOCATOR_H

// ***************************************************************************************
// INCLUDE SECTION
// ***************************************************************************************
#include "MemoryAllocatorBase.h"
#include "ObjectBase.h"

// ***************************************************************************************
// CLASS SECTION
// ***************************************************************************************
namespace ZakLib
{
	// ===================================================================================
	/// @brief		固定サイズブロックアロケータ
	// ===================================================================================
	template<class T> class FixedSizeBlockAllocator : public MemoryAllocatorBase
	{
		// ===============================================================================
		// 公開領域
		// ===============================================================================
		public:

			// ---------------------------------------------------------------------------
			// 関数
			// ---------------------------------------------------------------------------

			// ---------------------------------------------------------------------------
			/// @brief			コンストラクタ
			// ---------------------------------------------------------------------------
			FixedSizeBlockAllocator()
				: mpTop(NULL)
				, mpFreeList(NULL)
				, mAllocNum(0)
				, mNextIndex(0)
			{
			}

			// ---------------------------------------------------------------------------
			/// @brief			デストラクタ
			// ---------------------------------------------------------------------------
			~FixedSizeBlockAllocator()
			{
			}
		
			// ---------------------------------------------------------------------------
			/// @brief					初期化
			/// @param[in]	AllocNum	確保するオブジェクト数
			/// @return		bool		正常に確保することができたか
			// ---------------------------------------------------------------------------
			bool Initialize( int AllocNum )
			{
				mpTop = reinterpret_cast<int*>( new T[AllocNum] );

				if( !mpTop )
				{
					return false;
				}

				mAllocNum = AllocNum;

				return true;
			}
		
			// ---------------------------------------------------------------------------
			/// @brief					終了
			/// @return					正常に終了することができたか
			// ---------------------------------------------------------------------------
			bool Finalize()
			{
				if( mpTop )
				{ 
					delete[] reinterpret_cast<T*>( mpTop );
					mpTop = NULL;
				}

				return true;
			}

			// ---------------------------------------------------------------------------
			/// @brief					オブジェクト取得
			/// @return					指定した型の空きオブジェクト
			// ---------------------------------------------------------------------------
			T* GetObject()
			{
				if( mpFreeList )
				{
					T* pFreeTop = mpFreeList;
					T* pFreeNext = mpFreeList->GetNext();

					// 二つ以上フリーリストに登録されていれば
					// 二つ目のオブジェクトの前のオブジェクト（これから取得されるオブジェクト）の登録を破棄
					if( pFreeNext )
					{
						pFreeNext->SetPrev( NULL );
					}

					// 二つ目のオブジェクトを先頭に
					mpFreeList = pFreeNext;

					pFreeTop->Reset();

					return pFreeTop;
				}

				// 使用量オーバーチェック
				if( mNextIndex >= mAllocNum )
				{
					// 満タン
					return NULL;
				}

				// フリーリストの登録がなければ、未使用のブロックを割り当てる
				// 
				int sizeT = sizeof(T);

				T* pRet = (T*)( (char*)mpTop + sizeof(T) * mNextIndex );

				pRet->Reset();

				++mNextIndex;

				return pRet;
			}

			// ---------------------------------------------------------------------------
			/// @brief				オブジェクト解放
			/// @param[in]	pObj	解放したいオブジェクト
			/// @return		bool	正常に解放することができたか
			// ---------------------------------------------------------------------------
			bool ReleaseObject( T* pObj )
			{
				if( !pObj )
				{
					return false;
				}

				// フリーリストを連結
				if( mpFreeList )
				{
					// 先頭に挿入
					mpFreeList->SetPrev(pObj);
					pObj->SetNext(mpFreeList);
				}

				mpFreeList = pObj;

				return true;
			}

			// ---------------------------------------------------------------------------
			// 変数
			// ---------------------------------------------------------------------------

		// ===============================================================================
		// 非公開領域
		// ===============================================================================
		private:

			// ---------------------------------------------------------------------------
			// 関数
			// ---------------------------------------------------------------------------

			// ---------------------------------------------------------------------------
			// 変数
			// ---------------------------------------------------------------------------

			int*			mpTop;					//!<	確保領域先頭アドレス

			T*				mpFreeList;				//!<	フリーリスト

			int				mAllocNum;				//!<	確保個数

			int				mNextIndex;				//!<	次に確保するインデックス
	};
}

#endif//FIXEDSIZEBLOCKALLOCATOR_H